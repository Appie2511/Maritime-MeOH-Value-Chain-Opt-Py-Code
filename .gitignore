#Cost minimization


# Model
model = gp.Model("Methanol_Cost_Minimization")
# <insert model parameters here>
#Sets
countries = ["Russia", "Saoudi-Arabia", "USA", "Brazil", "Sweden", "China", "Chile", "Netherlands"]
ports = ["Shanghai", "Singapore", "Shenzhen", "Busan", "Rotterdam", "Hamburg", "New York", "Durban"]
resources = ["CH4", "H2", "CO2", "Biomass"]
methods = ["Fossil", "Biomass", "Electric"]

C = countries
K = ports
R = resources
P = methods
R_prime = [r for r in R if r != "Biomass"]

# Variables
x = model.addVars(C, C, R, name="x", lb=0, ub=1)             
M = model.addVars(C, P, name="M", lb=0)                    
F = model.addVars(C, K, name="F", lb=0)                      
Mi = model.addVars(C, name="Mi")

# Objective Function
model.setObjective(
    gp.quicksum(c_ship[i, j, r] * X_param[i, r] * x[i, j, r] for i in C for j in C for r in R) +
    gp.quicksum(c_prod[i, p] * M[i, p] for i in C for p in P) +
    gp.quicksum(c_meoh[i, k] * F[i, k] for i in C for k in K),
    GRB.MINIMIZE
)

#Setting x=0 for non transportable resources 
for r in non_transportable_resources:
    for i in C:
        for j in C:
            if i != j:
                model.addConstr(x[i, j, r] == 0)

# Constraints
for j in C:
    for r in R_prime:
        model.addConstr(
            X_param[j, r] + gp.quicksum(X_param[i, r] * x[i, j, r] for i in C) -
            gp.quicksum(X_param[j, r] * x[j, i, r] for i in C) >=
            gp.quicksum(lam[j, r, p] * M[j, p] for p in P if (j, r, p) in lam)
        )


for i in C:
    model.addConstr(
        gp.quicksum(M[i, p] for p in P) == gp.quicksum(F[i, k] for k in K))


for k in K:
    model.addConstr(gp.quicksum(F[i, k] for i in C) == D[k])

model.optimize()








#Emission minimization


# Model
model = gp.Model("Methanol_Cost_Minimization")
# <insert model parameters here>
#Sets
countries = ["Russia", "Saoudi-Arabia", "USA", "Brazil", "Sweden", "China", "Chile", "Netherlands"]
ports = ["Shanghai", "Singapore", "Shenzhen", "Busan", "Rotterdam", "Hamburg", "New York", "Durban"]
resources = ["CH4", "H2", "CO2", "Biomass"]
methods = ["Fossil", "Biomass", "Electric"]

C = countries
K = ports
R = resources
P = methods
R_prime = [r for r in R if r != "Biomass"]

# Variables
x = model.addVars(C, C, R, name="x", lb=0, ub=1)             
M = model.addVars(C, P, name="M", lb=0)                    
F = model.addVars(C, K, name="F", lb=0)                      
Mi = model.addVars(C, name="Mi")


# Objective Function
model.setObjective(
    gp.quicksum(e_trans[i, j, r] * X_param[i, r] * x[i, j, r] for i in C for j in C for r in R) +
    gp.quicksum(e_prod[i, p] * M[i, p] for i in C for p in P) +
    gp.quicksum(e_meoh[i, k] * F[i, k] for i in C for k in K),
    GRB.MINIMIZE
)

#Setting x=0 for non transportable resources
for r in non_transportable_resources:
    for i in C:
        for j in C:
            if i != j:
                model.addConstr(x[i, j, r] == 0, name=f"non_transport_{i}_{j}_{r}")
#Constraints
for j in C:
    for r in R_prime:
        model.addConstr(
            X_param[j, r] + gp.quicksum(X_param[i, r] * x[i, j, r] for i in C) -
            gp.quicksum(X_param[j, r] * x[j, i, r] for i in C) >=
            gp.quicksum(lam[j, r, p] * M[j, p] for p in P if (j, r, p) in lam)
        )

for i in C:
    model.addConstr(
        gp.quicksum(M[i, p] for p in P) == gp.quicksum(F[i, k] for k in K))

for k in K:
    model.addConstr(gp.quicksum(F[i, k] for i in C) == D[k])


model.optimize()








#Sensitivity analyses

# Subsidy sensitivity analysis
#Thresholds and regions
thresholds = [800, 700, 600, 550, 500, 450, 400, 350, 300, 250]
regions_to_ports = {
    "EU": ["Rotterdam", "Hamburg"],
    "US": ["New York"],
    "GS": ["Shanghai", "Singapore", "Shenzhen", "Busan", "Durban"]
}

results_total = []
results_region = {"EU": [], "US": [], "GS": []}

for region_name, ports_to_test in regions_to_ports.items():
    for threshold in thresholds:
        # Model
        model = gp.Model()
        # Variables
        x = model.addVars(C, C, R, name="x", lb=0, ub=1)             
        M = model.addVars(C, P, name="M", lb=0)                    
        F = model.addVars(C, P, K, name="F", lb=0)                      
        Mi = model.addVars(C, name="Mi")                             
        
        # <insert model parameters here>

        #Setting x=0 for non transportable resources
        for r in non_transportable_resources:
            for i in C:
                for j in C:
                    if i != j:
                        model.addConstr(x[i, j, r] == 0, name=f"non_transport_{i}_{j}_{r}")

        # Constraints
        for j in C:
            for r in R_prime:
                model.addConstr(
                    X_param[j, r] + gp.quicksum(X_param[i, r] * x[i, j, r] for i in C) -
                    gp.quicksum(X_param[j, r] * x[j, i, r] for i in C) >=
                    gp.quicksum(lam[j, r, p] * M[j, p] for p in P if (j, r, p) in lam)
                )

        for i in C:
            for p in P:
                model.addConstr(M[i, p] == gp.quicksum(F[i, p, k] for k in K), name=f"prod_flow_link_{i}_{p}")

        for k in K:
            model.addConstr(gp.quicksum(F[i, p, k] for p in P for i in C) >= D[k])

        # Policy constraint
        for region, ports in regions_to_ports.items():
            for k in ports:
                rhs = threshold * D[k] if region == region_name else 1e6 * D[k]
                cost = gp.quicksum(F[i, p, k] * (c_prod[i, p] + c_meoh[i, k]) for i in C for p in P)
                model.addConstr(cost <= rhs, name=f"{region}_{k}_cost_limit")
        # Objective function
        model.setObjective(
            gp.quicksum(e_trans[i, j, r] * X_param[i, r] * x[i, j, r] for i in C for j in C for r in R) +
            gp.quicksum(e_prod[i, p] * M[i, p] for i in C for p in P) +
            gp.quicksum(e_meoh[i, k] * gp.quicksum(F[i, p, k] for p in P) for i in C for k in K),
            gp.GRB.MINIMIZE
        )

        model.setParam('OutputFlag', 0)
        model.optimize()





# F-MeOH limit sensitivity analysis
#Thresholds and regions
thresholds = [1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]
regions_to_ports = {
    "EU": ["Rotterdam", "Hamburg"],
    "US": ["New York"],
    "GS": ["Shanghai", "Singapore", "Shenzhen", "Busan", "Durban"]
}

results_total = []
results_region = {"EU": [], "US": [], "GS": []}

for region_name, ports_to_test in regions_to_ports.items():
    for threshold in thresholds:
        # Model
        model = gp.Model()
        # Variables
        x = model.addVars(C, C, R, name="x", lb=0, ub=1)             
        M = model.addVars(C, P, name="M", lb=0)                    
        F = model.addVars(C, P, K, name="F", lb=0)                      
        Mi = model.addVars(C, name="Mi")                             
        
        # <insert model parameters here>
        
        #Setting x=0 for non transportable resources
        for r in non_transportable_resources:
            for i in C:
                for j in C:
                    if i != j:
                        model.addConstr(x[i, j, r] == 0, name=f"non_transport_{i}_{j}_{r}")

        # Constraints
        for j in C:
            for r in R_prime:
                model.addConstr(
                    X_param[j, r] + gp.quicksum(X_param[i, r] * x[i, j, r] for i in C) -
                    gp.quicksum(X_param[j, r] * x[j, i, r] for i in C) >=
                    gp.quicksum(lam[j, r, p] * M[j, p] for p in P if (j, r, p) in lam)
                )

        for i in C:
            for p in P:
                model.addConstr(M[i, p] == gp.quicksum(F[i, p, k] for k in K), name=f"prod_flow_link_{i}_{p}")

        for k in K:
            model.addConstr(gp.quicksum(F[i, p, k] for p in P for i in C) >= D[k])

        # Policy constraint
        for k in ports_to_test:
            fossil_flow = gp.quicksum(F[i, "Fossil", k] for i in C)
            model.addConstr(fossil_flow <= threshold * D[k], name=f"fossil_limit_{k}")

        # Objective function
        model.setObjective(
            gp.quicksum(c_ship[i, j, r] * x[i, j, r] * Xj[i, r] for i in C for j in C for r in resources_with_transport)+
            gp.quicksum(c_prod[i, p] * M[i, p] for i in C for p in P) +
            gp.quicksum(c_meoh[i, k] * gp.quicksum(F[i, p, k] for p in P) for i in C for k in K),
            GRB.MINIMIZE
        )

        model.setParam('OutputFlag', 0)
        model.optimize()




# Domestic supply requirement sensitivity analysis (for emissions, change cost parameters to emissions like in the preivous code)
#Thresholds and regions
thresholds = [1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]
regions_to_ports = {
    "EU": ["Rotterdam", "Hamburg"],
    "US": ["New York"],
    "GS": ["Shanghai", "Singapore", "Shenzhen", "Busan", "Durban"]
}

regions_to_countries = {
            "EU": ["Netherlands", "Sweden"],
            "US": ["USA"],
            "GS": ["Russia", "Saoudi-Arabia", "Brazil", "China", "Chile"]   
            }   

results_total = []
results_region = {"EU": [], "US": [], "GS": []}

for region_name, ports_to_test in regions_to_ports.items():
    for threshold in thresholds:
        # Model
        model = gp.Model()
        # Variables
        x = model.addVars(C, C, R, name="x", lb=0, ub=1)             
        M = model.addVars(C, P, name="M", lb=0)                    
        F = model.addVars(C, P, K, name="F", lb=0)                      
        Mi = model.addVars(C, name="Mi")                             
        
        # <insert model parameters here>
        
        #Setting x=0 for non transportable resources
        for r in non_transportable_resources:
            for i in C:
                for j in C:
                    if i != j:
                        model.addConstr(x[i, j, r] == 0, name=f"non_transport_{i}_{j}_{r}")

        # Constraints
        for j in C:
            for r in R_prime:
                model.addConstr(
                    X_param[j, r] + gp.quicksum(X_param[i, r] * x[i, j, r] for i in C) -
                    gp.quicksum(X_param[j, r] * x[j, i, r] for i in C) >=
                    gp.quicksum(lam[j, r, p] * M[j, p] for p in P if (j, r, p) in lam)
                )

        for i in C:
            for p in P:
                model.addConstr(M[i, p] == gp.quicksum(F[i, p, k] for k in K), name=f"prod_flow_link_{i}_{p}")

        for k in K:
            model.addConstr(gp.quicksum(F[i, p, k] for p in P for i in C) >= D[k])

        # Policy constraint
        region_countries = regions_to_countries[region_name]
        for k in ports_to_test:
            l1 = gp.quicksum(F[i, p, k] for i in region_countries for p in P)
            r1 = threshold * gp.quicksum(F[i, p, k] for i in C for p in P)
            model.addConstr(l1 >= r1, name=f"regional_{region_name}_{k}")

        # Objective function
        model.setObjective(
            gp.quicksum(c_ship[i, j, r] * x[i, j, r] * Xj[i, r] for i in C for j in C for r in resources_with_transport)+
            gp.quicksum(c_prod[i, p] * M[i, p] for i in C for p in P) +
            gp.quicksum(c_meoh[i, k] * gp.quicksum(F[i, p, k] for p in P) for i in C for k in K),
            GRB.MINIMIZE
        )

        model.setParam('OutputFlag', 0)
        model.optimize()







#Pareto front code (Multi Objective Optimization)


countries = ["Russia", "Saoudi-Arabia", "USA", "Brazil", "Sweden", "China", "Chile", "Netherlands"]
ports = ["Shanghai", "Singapore", "Shenzhen", "Busan", "Rotterdam", "Hamburg", "New York", "Durban"]
resources = ["CH4", "H2", "CO2", "Biomass"]
methods = ["Fossil", "Biomass", "Electric"]

C = countries
K = ports
R = resources
P = methods
R_prime = [r for r in R if r != "Biomass"]

# Storage for Pareto solutions
pareto_cost = []
pareto_emission = []

# <insert model parameters here>

# Step 1: Solve emission minimization to get lower bound
model = gp.Model("ParetoFront")
x = model.addVars(C, C, R, name="x", lb=0, ub=1)
M = model.addVars(C, P, name="M", lb=0)
F = model.addVars(C, K, name="F", lb=0)
Mi = model.addVars(C, name="Mi")

emission_expr = (
    gp.quicksum(e_trans[i, j, r] * X_param[i, r] * x[i, j, r] for i in C for j in C for r in R_prime) +
    gp.quicksum(e_prod[i, p] * M[i, p] for i in C for p in P) +
    gp.quicksum(e_meoh[i, k] * F[i, k] for i in C for k in K)
)

model.setObjective(emission_expr, GRB.MINIMIZE)

# Setting x=0 for non transportable resources
non_transportable_resources = ["H2", "Biomass"]

for r in non_transportable_resources:
    for i in C:
        for j in C:
            if i != j:
                model.addConstr(x[i, j, r] == 0, name=f"non_transport_{i}_{j}_{r}")

# Constraints
for j in C:
    for r in R_prime:
        model.addConstr(
            X_param[j, r] + gp.quicksum(X_param[i, r] * x[i, j, r] for i in C) -
            gp.quicksum(X_param[j, r] * x[j, i, r] for i in C) >=
            gp.quicksum(lam[j, r, p] * M[j, p] for p in P if (j, r, p) in lam)
        )

for i in C:
    model.addConstr(gp.quicksum(M[i, p] for p in P) == Mi[i])
    model.addConstr(gp.quicksum(F[i, k] for k in K) == Mi[i])

for k in K:
    model.addConstr(gp.quicksum(F[i, k] for i in C) == D[k])

model.optimize()
min_emission = model.ObjVal



# Step 2: ε-constraint optimization varying emission thresholds
epsilons = np.linspace(min_emission*1.000000001, min_emission*6, 300)

for eps in epsilons:
    # Model
    model = gp.Model("ParetoFront")
    x = model.addVars(C, C, R, name="x", lb=0, ub=1)
    M = model.addVars(C, P, name="M", lb=0)
    F = model.addVars(C, K, name="F", lb=0)
    Mi = model.addVars(C, name="Mi")

    emission_expr = (
        gp.quicksum(e_trans[i, j, r] * X_param[i, r] * x[i, j, r] for i in C for j in C for r in R_prime) +
        gp.quicksum(e_prod[i, p] * M[i, p] for i in C for p in P) +
        gp.quicksum(e_meoh[i, k] * F[i, k] for i in C for k in K)
    )
    cost_expr = (
        gp.quicksum(c_ship[i, j, r] * x[i, j, r] * X_param[i, r] for i in C for j in C for r in R_prime) +
        gp.quicksum(c_prod[i, p] * M[i, p] for i in C for p in P) +
        gp.quicksum(c_meoh[i, k] * F[i, k] for i in C for k in K)
    )

    model.setObjective(cost_expr, GRB.MINIMIZE)
    model.addConstr(emission_expr <= eps)

    for j in C:
        for r in R_prime:
            model.addConstr(
                X_param[j, r] + gp.quicksum(X_param[i, r] * x[i, j, r] for i in C) -
                gp.quicksum(X_param[j, r] * x[j, i, r] for i in C) >=
                gp.quicksum(lam[j, r, p] * M[j, p] for p in P if (j, r, p) in lam)
            )

    # Setting x=0 for non transportable resources
    non_transportable_resources = ["H2", "Biomass"]

    for r in non_transportable_resources:
        for i in C:
            for j in C:
                if i != j:
                    model.addConstr(x[i, j, r] == 0, name=f"non_transport_{i}_{j}_{r}")

    for i in C:
        model.addConstr(gp.quicksum(M[i, p] for p in P) == Mi[i])
        model.addConstr(gp.quicksum(F[i, k] for k in K) == Mi[i])

    for k in K:
        model.addConstr(gp.quicksum(F[i, k] for i in C) == D[k])
    
    model.optimize()
